{"version":3,"file":"bundle.js","sources":["../src/008.类型保护.ts","../src/index.ts"],"sourcesContent":["/**\r\n * 自定义类型\r\n */\r\n\r\n/**\r\n * 求不同 (取T的)\r\n */\r\nlet p1 = { name: 'z1', age: 12, sex: 'man' }\r\nlet p2 = { name: 'z2' }\r\ntype p1Type = typeof p1\r\ntype p2Type = typeof p2\r\ntype Diff<T extends object, U extends object> = Omit<T, keyof U>\r\ntype DiffType = Diff<p1Type, p2Type>\r\n\r\n/**\r\n * 求同 (取T的)\r\n */\r\ntype Inter<T extends object, U extends object> = Pick<T, Extract<keyof T, keyof U>>\r\ntype InterType = Inter<p1Type, p2Type>\r\n\r\n/**\r\n * 合并两个对象 (后覆盖前)\r\n */\r\nlet p3 = { name: 'z1', age: 12, sex: 'man' }\r\nlet p4 = { name: 'z2', age: '12' }\r\ntype p3Type = typeof p3\r\ntype p4Type = typeof p4\r\ntype Merge<T extends object, U extends object> = Omit<T, keyof U> & U\r\ntype computed<T> = {[k in keyof T]: T[k]}\r\ntype MergeType = computed<Merge<p3Type, p4Type>>\r\n\r\n/**\r\n * '第2个' 重写 '第1个' 重复那部分 (后覆盖前)\r\n */\r\nlet p5 = { name: 'z1', age: 12}\r\nlet p6 = { age: '12', sex: 'man'  }\r\ntype p5Type = typeof p5\r\ntype p6Type = typeof p6\r\ntype OverWrite<T extends object, U extends object> = Omit<T, keyof U> & Inter<U, T>\r\ntype OverWriteType = computed<OverWrite<p5Type, p6Type>>\r\n\r\n\r\n/**\r\n * 类型保护\r\n * 更好地区识别类型\r\n */\r\n/**\r\n * js的typeof instanceof in\r\n */\r\nfunction getV1(v: string | number) {\r\n    if (typeof v === 'string') {\r\n        // --snip--\r\n    }else {\r\n        // --snip--\r\n    }\r\n}\r\n\r\nclass Animal {}\r\nclass Fruit {}\r\nfunction getV2(v: Animal | Fruit) {\r\n    if (v instanceof Animal) {\r\n        // --snip--\r\n    }else {\r\n        // --snip--\r\n    }\r\n}\r\n\r\ninterface Fish { kind: '鱼', swim: string }\r\ninterface Bird { kind: '鸟', fly: string }\r\nfunction getV3(v: Fish | Bird) {\r\n    if ('swim' in v) {\r\n        // --snip--\r\n    }else {\r\n        // --snip--\r\n    }\r\n}\r\n\r\n/**\r\n * ts语法: x is XX、never进行完整性保护\r\n */\r\nfunction getV4(v: Fish | Bird) {\r\n    if (isFish(v)) {\r\n        console.log(v)\r\n    }else {\r\n        console.log(v)\r\n    }\r\n}\r\nfunction isFish(v: Fish | Bird): v is Fish {\r\n    return v.kind === '鱼'\r\n}\r\n\r\ninterface ICircle { kind: 'circle' }\r\ninterface IRectangle { kind: 'rectangle' }\r\ninterface ISquare { kind: 'ISquare' }\r\nfunction getArea(shape: ICircle | IRectangle | ISquare) {\r\n    switch (shape.kind) {\r\n        case \"circle\":\r\n            break;\r\n        case \"ISquare\":\r\n            break;\r\n        case \"rectangle\":\r\n            break;\r\n        default:\r\n            assert(shape)   // 如果上面漏泄了一个，这里就会报错。常用!\r\n            break;\r\n    }\r\n}\r\nfunction assert(obj: never) {}\r\n\r\nexport default {}","// import baseData from './001.基础数据类型'\r\n// import fnType from './002.函数的类型'\r\n// import classKnowledge from './003.类'\r\n// import interfaceKnowledge from './004.接口'\r\n// import gen from './005.泛型'\r\n// import conditionType from './006.条件类型'\r\n// import buildInType from './007.内置类型'\r\nimport typeProtect from './008.类型保护'\r\n\r\n// console.log(baseData)\r\n// console.log(fnType)\r\n// console.log(classKnowledge)\r\n// console.log(interfaceKnowledge)\r\n// console.log(gen)\r\n// console.log(conditionType)\r\n// console.log(buildInType)\r\nconsole.log(typeProtect)\r\n\r\n// let aaa:string = '333'\r\n// console.log(aaa)\r\n\r\n// keyof any => string | number | symbol 表示所有的key类型\r\n"],"names":[],"mappings":";;;;;IAAA;;;AA6GA,sBAAe,EAAE;;IC7GjB;IASA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;IAExB;IACA;IAEA;;;;;;"}